https://github.com/DhruvGheewala/Decoder/blob/836e2edfdde55d4cbe8657584a4b20cf3519b636/utils/compile-run.js#L41


profile modification
tag edit ,show 

forgot password 

// curl -H "Content-Type: application/json; charset=UTF-8" -X POST -d '{"clientId": "YourClientId","clientSecret":"YourClientSecret"}' https:z

/* 
    {
        "swagger": "2.0",
        "info": {
            "description": "JDoodle Compiler API",
                "version": "1.0.0",
                "title": "JDoodle Compiler API",
                "termsOfService": "https://www.jdoodle.com/terms",
                "contact": {
                "email": "jdoodle@nutpan.com"
            }
        },
        "host": "api.jdoodle.com",
        "basePath": "/v1",
        "consumes": [
            "application/json"
        ],
        "produces": [
            "application/json"
        ],
        "paths": {
        "/execute": {
            "post": {
                "summary": "Execute Program",
                    "description": "Endpoint to execute code",
                    "tags": [
                        "execute"
                    ],
                    "parameters": [
                    {
                        "name": "execute",
                        "in": "body",
                        "description": "the body",
                        "required": true,
                        "schema": {
                            "properties": {
                                "clientId": {
                                    "type": "string"
                                },
                                "clientSecret": {
                                    "type": "string"
                                },
                                "script": {
                                    "type": "string"
                                },
                                "stdin": {
                                  "type": "string"
                                },
                                "language": {
                                    "type": "string"
                                },
                                "versionIndex": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                    "responses": {
                    "200": {
                        "description": "Execution success",
                        "schema": {
                          "type": "object",
                          "properties": {
                            "output": {
                              "type": "string",
                              "description": "Output"
                            },
                            "statusCode": {
                              "type": "integer",
                              "description": "Status Code"
                            },
                            "memory": {
                              "type": "number",
                              "description": "Memory used"
                            },
                            "cpuTime": {
                              "type": "number",
                              "description": "CPU Time used"
                            }
                          }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "429": {
                        "description": "Daily limit reached"
                    }
                }
            }
        },
        "/credit-spent": {
            "post": {
                "summary": "Credit Spent",
                    "description": "Endpoint to execute code",
                    "tags": [
                    "credit-spent"
                ],
                    "parameters": [
                    {
                        "name": "credit",
                        "in": "body",
                        "description": "the body",
                        "required": true,
                        "schema": {
                            "properties": {
                                "clientId": {
                                    "type": "string"
                                },
                                "clientSecret": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                    "responses": {
                    "200": {
                        "description": "Execution success",
                        "schema": {
                          "type": "object",
                          "properties": {
                            "used": {
                              "type": "integer",
                              "description": "No of credits used today"
                            }
                          }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        }
    },
        "externalDocs": {
        "description": "Find out more about JDoodle Compiler API",
            "url": "https://www.jdoodle.com/compiler-api"
    }
}
*/

/* 
curl -H "Content-Type: application/json; charset=UTF-8" -X POST -d '{"clientId": "YourClientId","clientSecret":"YourClientSecret","script":"","language":"php","versionIndex":"0"}' https://api.jdoodle.com/v1/execute

 */

/* 
var request = require('request');
var program = {
    script : "",
    language: "php",
    versionIndex: "0",
    clientId: "YourClientID",
    clientSecret:"YourClientSecret"
};
request({
    url: 'https://api.jdoodle.com/v1/execute',
    method: "POST",
    json: program
},
function (error, response, body) {
    console.log('error:', error);
    console.log('statusCode:', response && response.statusCode);
    console.log('body:', body);
});
 */

https://docs.jdoodle.com/compiler-api/compiler-api



#include<iostream>
using namespace std;
int main()
{
    cout << "server tested";
}


idea : 
debuger 
problem predector based on programmer solved in past 