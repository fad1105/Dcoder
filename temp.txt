https://github.com/DhruvGheewala/Decoder/blob/836e2edfdde55d4cbe8657584a4b20cf3519b636/utils/compile-run.js#L41


profile modification
tag edit ,show 

forgot password 

// curl -H "Content-Type: application/json; charset=UTF-8" -X POST -d '{"clientId": "YourClientId","clientSecret":"YourClientSecret"}' https:z

/* 
    {
        "swagger": "2.0",
        "info": {
            "description": "JDoodle Compiler API",
                "version": "1.0.0",
                "title": "JDoodle Compiler API",
                "termsOfService": "https://www.jdoodle.com/terms",
                "contact": {
                "email": "jdoodle@nutpan.com"
            }
        },
        "host": "api.jdoodle.com",
        "basePath": "/v1",
        "consumes": [
            "application/json"
        ],
        "produces": [
            "application/json"
        ],
        "paths": {
        "/execute": {
            "post": {
                "summary": "Execute Program",
                    "description": "Endpoint to execute code",
                    "tags": [
                        "execute"
                    ],
                    "parameters": [
                    {
                        "name": "execute",
                        "in": "body",
                        "description": "the body",
                        "required": true,
                        "schema": {
                            "properties": {
                                "clientId": {
                                    "type": "string"
                                },
                                "clientSecret": {
                                    "type": "string"
                                },
                                "script": {
                                    "type": "string"
                                },
                                "stdin": {
                                  "type": "string"
                                },
                                "language": {
                                    "type": "string"
                                },
                                "versionIndex": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                    "responses": {
                    "200": {
                        "description": "Execution success",
                        "schema": {
                          "type": "object",
                          "properties": {
                            "output": {
                              "type": "string",
                              "description": "Output"
                            },
                            "statusCode": {
                              "type": "integer",
                              "description": "Status Code"
                            },
                            "memory": {
                              "type": "number",
                              "description": "Memory used"
                            },
                            "cpuTime": {
                              "type": "number",
                              "description": "CPU Time used"
                            }
                          }
                    },
                    "401": {
                        "description": "Unauthorized"
                    },
                    "429": {
                        "description": "Daily limit reached"
                    }
                }
            }
        },
        "/credit-spent": {
            "post": {
                "summary": "Credit Spent",
                    "description": "Endpoint to execute code",
                    "tags": [
                    "credit-spent"
                ],
                    "parameters": [
                    {
                        "name": "credit",
                        "in": "body",
                        "description": "the body",
                        "required": true,
                        "schema": {
                            "properties": {
                                "clientId": {
                                    "type": "string"
                                },
                                "clientSecret": {
                                    "type": "string"
                                }
                            }
                        }
                    }
                ],
                    "responses": {
                    "200": {
                        "description": "Execution success",
                        "schema": {
                          "type": "object",
                          "properties": {
                            "used": {
                              "type": "integer",
                              "description": "No of credits used today"
                            }
                          }
                        }
                    },
                    "401": {
                        "description": "Unauthorized"
                    }
                }
            }
        }
    },
        "externalDocs": {
        "description": "Find out more about JDoodle Compiler API",
            "url": "https://www.jdoodle.com/compiler-api"
    }
}
*/

/* 
curl -H "Content-Type: application/json; charset=UTF-8" -X POST -d '{"clientId": "YourClientId","clientSecret":"YourClientSecret","script":"","language":"php","versionIndex":"0"}' https://api.jdoodle.com/v1/execute

 */

/* 
var request = require('request');
var program = {
    script : "",
    language: "php",
    versionIndex: "0",
    clientId: "YourClientID",
    clientSecret:"YourClientSecret"
};
request({
    url: 'https://api.jdoodle.com/v1/execute',
    method: "POST",
    json: program
},
function (error, response, body) {
    console.log('error:', error);
    console.log('statusCode:', response && response.statusCode);
    console.log('body:', body);
});
 */

https://docs.jdoodle.com/compiler-api/compiler-api 




#include<iostream>
using namespace std;
int main()
{
    cout << "server tested";
}


idea : 
debuger 
problem predector based on programmer solved in past 




Client ID 
6b9cb7c8a2328869a3ede7a4d167b2d0
Client Secret 
c3e31d55e9a385391f9f70ab1d1f3ebece6ebcc58498fe18c2904b5e72243345

 online  100   
list
offline 



"": {
  "prefix": "",
  "body": [
    "#include<iostream>",
    "using namespace std;",
    "int main()",
    "{",
    "  cout << \"hello nikhil !!\";",
    "  return 0;",
    "}"
  ],
  "description": ""
}

  "#include<iostream>\n using namespace std;\nint main()\n{\n  cout << \"hello nikhil !!\";\n  return 0;\n}"

\n

,
        "language": "cpp14",
        "versionIndex": "0",
        "clientId": "6b9cb7c8a2328869a3ede7a4d167b2d0",
        "clientSecret":"c3e31d55e9a385391f9f70ab1d1f3ebece6ebcc58498fe18c2904b5e72243345"


{
        "script" : "#include<iostream>\n using namespace std;\nint main()\n{\n  cout << \"hello nikhil !!\";\n  return 0;\n}",
        "language": "cpp14",
        "versionIndex": "0",
        "clientId": "6b9cb7c8a2328869a3ede7a4d167b2d0",
        "clientSecret":"c3e31d55e9a385391f9f70ab1d1f3ebece6ebcc58498fe18c2904b5e72243345"
    }


  // import React, { useState, useEffect, useRef, useCallback } from 'react';
  // import PropTypes from 'prop-types';
  // import loader from '@monaco-editor/loader';
  // // import react from '@monaco-editor/react';
  
  // import MonacoContainer from '@monaco-editor/react/lib/es/MonacoContainer';
  // import useMount from '@monaco-editor/react/lib/es/hooks/useMount';
  // import useUpdate from '@monaco-editor/react/lib/es/hooks/useUpdate';
  // import usePrevious from '@monaco-editor/react/lib/es/hooks/usePrevious';
  // import { noop, getOrCreateModel, isUndefined } from '@monaco-editor/react/lib/es/utils';
  
  // const viewStates = new Map();
  
  // function Dummy({
  //   defaultValue,
  //   defaultLanguage,
  //   defaultPath,
  //   value,
  //   language,
  //   path,
  //   /* === */
  //   theme,
  //   line,
  //   loading,
  //   options,
  //   overrideServices,
  //   saveViewState,
  //   keepCurrentModel,
  //   /* === */
  //   width,
  //   height,
  //   className,
  //   wrapperProps,
  //   /* === */
  //   beforeMount,
  //   onMount,
  //   onChange,
  //   onValidate,
  // }) {
  //   const [isEditorReady, setIsEditorReady] = useState(false);
  //   const [isMonacoMounting, setIsMonacoMounting] = useState(true);
  //   const monacoRef = useRef(null);
  //   const editorRef = useRef(null);
  //   const containerRef = useRef(null);
  //   const onMountRef = useRef(onMount);
  //   const beforeMountRef = useRef(beforeMount);
  //   const subscriptionRef = useRef(null);
  //   const valueRef = useRef(value);
  //   const previousPath = usePrevious(path);
  
  //   useMount(() => {
  //     const cancelable = loader.init();
  
  //     cancelable
  //       .then(monaco => ((monacoRef.current = monaco) && setIsMonacoMounting(false)))
  //       .catch(error => error?.type !== 'cancelation' &&
  //         console.error('Monaco initialization: error:', error));
  
  //     return () => editorRef.current ? disposeEditor() : cancelable.cancel();
  //   });
  
  //   useUpdate(() => {
  //     const model = getOrCreateModel(
  //       monacoRef.current,
  //       defaultValue || value,
  //       defaultLanguage || language,
  //       path,
  //     );
  
  //     if (model !== editorRef.current.getModel()) {
  //       saveViewState && viewStates.set(previousPath, editorRef.current.saveViewState());
  //       editorRef.current.setModel(model);
  //       saveViewState && editorRef.current.restoreViewState(viewStates.get(path));
  //     }
  //   }, [path], isEditorReady);
  
  //   useUpdate(() => {
  //     editorRef.current.updateOptions(options);
  //   }, [options], isEditorReady);
  
  //   useUpdate(() => {
  //     if (editorRef.current.getOption(monacoRef.current.editor.EditorOption.readOnly)) {
  //       editorRef.current.setValue(value);
  //     } else {
  //       if (value !== editorRef.current.getValue()) {
  //         editorRef.current.executeEdits('', [{
  //           range: editorRef.current.getModel().getFullModelRange(),
  //           text: value,
  //           forceMoveMarkers: true,
  //         }]);
  
  //         editorRef.current.pushUndoStop();
  //       }
  //     }
  //   }, [value], isEditorReady);
  
  //   useUpdate(() => {
  //     monacoRef.current.editor.setModelLanguage(editorRef.current.getModel(), language);
  //   }, [language], isEditorReady);
  
  //   useUpdate(() => {
  //     // reason for undefined check: https://github.com/suren-atoyan/monaco-react/pull/188
  //     if(!isUndefined(line)) {
  //       editorRef.current.revealLine(line);
  //     }
  //   }, [line], isEditorReady);
  
  //   useUpdate(() => {
  //     monacoRef.current.editor.setTheme(theme);
  //   }, [theme], isEditorReady);
  
  //   const createEditor = useCallback(() => {
  //     beforeMountRef.current(monacoRef.current);
  //     const autoCreatedModelPath = path || defaultPath;
  
  //     const defaultModel = getOrCreateModel(
  //       monacoRef.current,
  //       value || defaultValue,
  //       defaultLanguage || language,
  //       autoCreatedModelPath,
  //     );
  
  //     editorRef.current = monacoRef.current.editor.create(containerRef.current, {
  //       model: defaultModel,
  //       automaticLayout: true,
  //       ...options,
  //     }, overrideServices);
  
  //     saveViewState && editorRef.current.restoreViewState(viewStates.get(autoCreatedModelPath));
  
  //     monacoRef.current.editor.setTheme(theme);
  
  //     setIsEditorReady(true);
  //   }, [
  //     defaultValue,
  //     defaultLanguage,
  //     defaultPath,
  //     value,
  //     language,
  //     path,
  //     options,
  //     overrideServices,
  //     saveViewState,
  //     theme,
  //   ]);
  
  //   useEffect(() => {
  //     if (isEditorReady) {
  //       onMountRef.current(
  //         editorRef.current,
  //         monacoRef.current,
  //       );
  //     }
  //   }, [isEditorReady]);
  
  //   useEffect(() => {
  //     !isMonacoMounting && !isEditorReady && createEditor();
  //   }, [isMonacoMounting, isEditorReady, createEditor]);
  
  //   // subscription
  //   // to avoid unnecessary updates (attach - dispose listener) in subscription
  //   valueRef.current = value;
  
  //   useEffect(() => {
  //     if (isEditorReady && onChange) {
  //       subscriptionRef.current?.dispose();
  //       subscriptionRef.current = editorRef.current?.onDidChangeModelContent(event => {
  //         const editorValue = editorRef.current.getValue();
  
  //         if (valueRef.current !== editorValue) {
  //           onChange(editorValue, event);
  //         }
  //       });
  //     }
  //   }, [isEditorReady, onChange]);
  
  //   // onValidate
  //   useEffect(() => {
  //     if (isEditorReady) {
  //       const changeMarkersListener = monacoRef.current.editor.onDidChangeMarkers(uris => {
  //         const editorUri = editorRef.current.getModel()?.uri;
  
  //         if (editorUri) {
  //           const currentEditorHasMarkerChanges = uris.find((uri) => uri.path === editorUri.path);
  //           if (currentEditorHasMarkerChanges) {
  //             const markers = monacoRef.current.editor.getModelMarkers({ resource: editorUri });
  //             onValidate?.(markers);
  //           }
  //         }
  //       });
     
  //       return () => {
  //         changeMarkersListener?.dispose();
  //       };
  //     }
  //   }, [isEditorReady, onValidate]);
  
  //   function disposeEditor() {
  //     subscriptionRef.current?.dispose();
  
  //     if (keepCurrentModel) {
  //       saveViewState && viewStates.set(path, editorRef.current.saveViewState());
  //     } else {
  //       editorRef.current.getModel()?.dispose();
  //     }
  
  //     editorRef.current.dispose();
  //   }
  
  //   return (
  //     <MonacoContainer
  //       width={width}
  //       height={height}
  //       isEditorReady={isEditorReady}
  //       loading={loading}
  //       _ref={containerRef}
  //       className={className}
  //       wrapperProps={wrapperProps}
  //     />
  //   );
  // }
  
  // Dummy.propTypes = {
  //   defaultValue: PropTypes.string,
  //   defaultPath: PropTypes.string,
  //   defaultLanguage: PropTypes.string,
  //   value: PropTypes.string,
  //   language: PropTypes.string,
  //   path: PropTypes.string,
  //   /* === */
  //   theme: PropTypes.string,
  //   line: PropTypes.number,
  //   loading: PropTypes.oneOfType([PropTypes.element, PropTypes.string]),
  //   options: PropTypes.object,
  //   overrideServices: PropTypes.object,
  //   saveViewState: PropTypes.bool,
  //   keepCurrentModel: PropTypes.bool,
  //   /* === */
  //   width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  //   height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),
  //   className: PropTypes.string,
  //   wrapperProps: PropTypes.object,
  //   /* === */
  //   beforeMount: PropTypes.func,
  //   onMount: PropTypes.func,
  //   onChange: PropTypes.func,
  //   onValidate: PropTypes.func,
  // };
  
  // Dummy.defaultProps = {
  //   theme: 'light',
  //   loading: 'Loading...',
  //   options: {},
  //   overrideServices: {},
  //   saveViewState: true,
  //   keepCurrentModel: false,
  //   /* === */
  //   width: '100%',
  //   height: '100%',
  //   wrapperProps: {},
  //   /* === */
  //   beforeMount: noop,
  //   onMount: noop,
  //   onValidate: noop,
  // };
  
  // export default Dummy;

import React from 'react'
import loader from "@monaco-editor/loader";

export default function Dummy() {
  function handle() {
    loader.init().then(monaco => {
      const wrapper = document.getElementById("root");
      wrapper.style.height = "100vh";
      const properties = {
        value: "function hello() {\n\talert(\"Hello world!\");\n}",
        language:  "javascript",
      }
      
      monaco.editor.create(wrapper,  properties);
    });  
  }
  
  return (
    <>
    {handle}
    </>
  )
}

https://github.com/suren-atoyan/monaco-react/blob/master/src/Editor/Editor.js
https://github.com/suren-atoyan/monaco-react#create-your-own-editor
https://mdbootstrap.com/docs/b4/jquery/navigation/sidenav1/

// some comment
#include<iostream> 
using namespace std ; 
int main() 
{
    cout << "hello world!" ; 
    return 0 ; 
}

#include<iostream> 
using namespace std ; 
int main() 
{
    cout << "hello world!" ; 
    int n ; 
    cin >> n ; 
    cout << "number is " << n ; 
    return 0 ; 
}


https://www.kontests.net/api/v1/sites


url images 
https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTbm95Gl0ZYobCAwdzralQrPEVPm2Gw6DYllw&usqp=CAU
https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTG3zCOd6hR1W7VQy7Tur7DpvgknyiNXSw7lg&usqp=CAU

4f4b4a

#include<stdio.h>
int main()
{
    int n ; 
    scanf("%d",&n);

    printf("heelo = %d",n);
    return 0 ; 
}